Leetcode 15: 3Sum - Java Solution (7ms, O(nÂ²) time)

âœ… Java Code:

==============================================================

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);  // Pehle sort karo
        List<List<Integer>> result = new ArrayList<>();

        for (int i = 0; i < nums.length - 2; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;  // Duplicate skip karo

            int left = i + 1;
            int right = nums.length - 1;

            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];

                if (sum == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    while (left < right && nums[left] == nums[left + 1]) left++;  // duplicate left
                    while (left < right && nums[right] == nums[right - 1]) right--;  // duplicate right
                    left++;
                    right--;
                } else if (sum < 0) {
                    left++;  // Sum chhota hai â†’ bada number lo
                } else {
                    right--;  // Sum zyada hai â†’ chhota number lo
                }
            }
        }

        return result;
    }
}

==============================================================

ðŸ§  Explanation Line by Line:

Arrays.sort(nums);
â†’ Pehle array ko sort kiya so that 2-pointer approach use kar sake.

for (int i = 0; i < nums.length - 2; i++)
â†’ Har index i ke liye i+1 se n-1 tak search karenge.

if (i > 0 && nums[i] == nums[i - 1]) continue;
â†’ Agar same element already check ho chuka hai, skip kar do (duplicates avoid).

int left = i + 1, right = nums.length - 1;
â†’ 2-pointer initialize: ek start se, ek end se.

int sum = nums[i] + nums[left] + nums[right];
â†’ Triplet ka sum nikala.

if (sum == 0)
â†’ Perfect triplet mila, list mein add kiya.

while (left < right && nums[left] == nums[left + 1]) left++;
â†’ Left side ke duplicates hata diye.

while (left < right && nums[right] == nums[right - 1]) right--;
â†’ Right side ke duplicates hata diye.

left++; right--;
â†’ Agla pair try karne ke liye pointers move kiye.

else if (sum < 0) left++;
â†’ Sum chhota hai to left pointer aage badhao.

else right--;
â†’ Sum bada hai to right pointer peeche lao.

ðŸ“Œ Example:
Input: [-1, 0, 1, 2, -1, -4]
Output: [[-1, -1, 2], [-1, 0, 1]]

ðŸš€ Time & Space Complexity:
Time: O(nÂ²)

Space: O(1) (excluding result list)

For any doubt or help, feel free to connect:
ðŸ”— https://www.linkedin.com/in/saurabh884095/