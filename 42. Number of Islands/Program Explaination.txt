✅ Leetcode 200: Number of Islands – Java (0ms, O(m×n) Time)

class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j);  // flood fill
                    count++;
                }
            }
        }
        return count;
    }

    private void dfs(char[][] grid, int i, int j) {
        // base case: check bounds and water
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length 
            || grid[i][j] == '0') return;

        grid[i][j] = '0'; // mark as visited

        // explore all 4 directions
        dfs(grid, i + 1, j); // down
        dfs(grid, i - 1, j); // up
        dfs(grid, i, j + 1); // right
        dfs(grid, i, j - 1); // left
    }
}


🧠  Explanation Line by Line:
int count = 0;
→ Islands count karne ke liye variable.

Nested loop:
→ Grid ka har cell check karenge.

if (grid[i][j] == '1')
→ Agar land mila, toh DFS start karo aur count++

dfs(grid, i, j)
→ Surrounding land ko visit karo (flood fill).

Base case in dfs:
→ Agar index out of bounds ya '0' hai, return.

grid[i][j] = '0';
→ Visited mark kar diya (taaki dobara visit na ho).

Explore 4 directions – up, down, left, right.

📌 Example:

Input:
[
  ['1','1','0','0','0'],
  ['1','1','0','0','0'],
  ['0','0','1','0','0'],
  ['0','0','0','1','1']
]

Output: 3
⏱️ Time & Space Complexity:
Time: O(m × n) — Har cell ek hi baar visit hoti hai

Space: O(m × n) worst case (recursion stack)


For any queries/help:
🔗 https://www.linkedin.com/in/saurabh884095/