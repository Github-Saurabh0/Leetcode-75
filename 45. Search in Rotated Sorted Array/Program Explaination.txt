✅ Leetcode 33: Search in Rotated Sorted Array – Java (0ms, O(log n))

class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target)
                return mid;

            // Left half is sorted
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid])
                    right = mid - 1; // target lies in left half
                else
                    left = mid + 1;  // target lies in right half
            } 
            // Right half is sorted
            else {
                if (nums[mid] < target && target <= nums[right])
                    left = mid + 1;  // target lies in right half
                else
                    right = mid - 1; // target lies in left half
            }
        }

        return -1; // not found
    }
}

🧠 Explanation Line by Line:
int left = 0, right = nums.length - 1;
→ Binary search ke liye left aur right pointers.

int mid = left + (right - left) / 2;
→ Overflow avoid karne ke liye yeh formula.

if (nums[mid] == target)
→ Target mil gaya, toh index return.

if (nums[left] <= nums[mid])
→ Check kar rahe ki left half sorted hai ya nahi.

if (nums[left] <= target && target < nums[mid])
→ Target left half me hai toh right = mid - 1.

else left = mid + 1;
→ Nahi toh right half me hoga.

else if (nums[mid] < target && target <= nums[right])
→ Right sorted half me target check karo.

else right = mid - 1;
→ Target left half me hoga.

📌 Example:
Input:
nums = [4,5,6,7,0,1,2], target = 0

Output: 4

⏱️ Time & Space Complexity:
Time: O(log n) – Binary Search

Space: O(1) – No extra space

For help or queries, feel free to reach out:
🔗 https://www.linkedin.com/in/saurabh884095/