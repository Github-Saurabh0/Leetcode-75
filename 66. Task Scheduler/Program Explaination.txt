âœ… Java Code (Clean, Fast, Accurate Parsing)

class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] freq = new int[26];
        for (char task : tasks) {
            freq[task - 'A']++;
        }

        Arrays.sort(freq);
        int maxFreq = freq[25] - 1;
        int idleSlots = maxFreq * n;

        for (int i = 24; i >= 0 && freq[i] > 0; i--) {
            idleSlots -= Math.min(freq[i], maxFreq);
        }

        return idleSlots > 0 ? tasks.length + idleSlots : tasks.length;
    }
}


ðŸ“˜ Explanation

int[] freq = new int[26];
ðŸ”¹ 26 size ka array banaya, jisme har task (A-Z) ka frequency store karenge.

for (char task : tasks) { freq[task - 'A']++; }
ðŸ”¹ Har task ki frequency ko count kiya (A = 0, B = 1,... Z = 25).

Arrays.sort(freq);
ðŸ”¹ Frequency array ko sort kiya taaki highest frequency last me ho.

int maxFreq = freq[25] - 1;
ðŸ”¹ Sabse zyada frequency wale task ke repetitions ke beech gap chahiye â†’ isliye -1 kiya.

int idleSlots = maxFreq * n;
ðŸ”¹ Har gap me n idle chahiye â†’ total idle slots calculate kiye.

for (int i = 24; i >= 0 && freq[i] > 0; i--) { idleSlots -= Math.min(freq[i], maxFreq); }
ðŸ”¹ Baaki tasks se idle slots ko fill karne ki koshish ki.

return idleSlots > 0 ? tasks.length + idleSlots : tasks.length;
ðŸ”¹ Agar idle slots bache, toh add karo; warna direct tasks ka length hi answer hai.

Example
Input: tasks = ['A','A','A','B','B','B'], n = 2
Output: 8
Explanation: A â†’ B â†’ idle â†’ A â†’ B â†’ idle â†’ A â†’ B

Time and Space Complexity
Time: O(n + 26 log 26) â†’ tasks process + sort
Space: O(1) â†’ only fixed size array

ðŸ”— Facing any issue or want more Java tricks?
Connect here: https://www.linkedin.com/in/saurabh884095/