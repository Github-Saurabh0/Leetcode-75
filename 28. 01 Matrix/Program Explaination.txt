Leetcode 542: 01 Matrix - Java Solution (2ms, O(m Ã— n) time)

==============================================================

âœ… Java Code:

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int[][] dist = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();

        // Step 1: Initialize
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 0) {
                    dist[i][j] = 0;
                    queue.offer(new int[]{i, j});  // BFS starting points
                } else {
                    dist[i][j] = Integer.MAX_VALUE;  // 1s ke liye initially infinite
                }
            }
        }

        // Step 2: BFS traversal
        int[][] directions = {{1,0}, {-1,0}, {0,1}, {0,-1}};  // 4 directions
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int x = cell[0], y = cell[1];

            for (int[] dir : directions) {
                int newX = x + dir[0], newY = y + dir[1];
                if (newX >= 0 && newY >= 0 && newX < m && newY < n &&
                    dist[newX][newY] > dist[x][y] + 1) {
                    dist[newX][newY] = dist[x][y] + 1;
                    queue.offer(new int[]{newX, newY});
                }
            }
        }

        return dist;
    }
}

==============================================================

ðŸ§  Explanation Line by Line:

int m = mat.length, n = mat[0].length;
â†’ Matrix ke row aur column nikal liye.

int[][] dist = new int[m][n];
â†’ Final distance matrix banaya.

Queue<int[]> queue = new LinkedList<>();
â†’ BFS ke liye queue use karenge.

First loop mein:

Agar mat[i][j] == 0, toh distance 0 aur queue mein add karo.

Agar 1 hai toh distance ko infinity (max value) se initialize karo.

int[][] directions = {{1,0}, {-1,0}, {0,1}, {0,-1}};
â†’ 4 possible directions ke liye array banaya (up, down, left, right).

while (!queue.isEmpty())
â†’ BFS loop chalu, jab tak queue khaali nahi hoti.

Har direction ke liye check karo:

Kya naya cell matrix ke andar hai?

Agar dist[newX][newY] > dist[x][y] + 1, toh update karo aur queue mein daal do.

return dist;
â†’ Final distance matrix return karo.

ðŸ“Œ Example:
Input:

mat =  [[0,0,0],
       [0,1,0],
       [1,1,1]]
Output:

 [[0,0,0],
 [0,1,0],
 [1,2,1]]
This approach ensures every 1 gets the nearest 0â€™s distance using BFS, hence optimal.

For any doubt or help, feel free to connect:
ðŸ”— https://www.linkedin.com/in/saurabh884095/

