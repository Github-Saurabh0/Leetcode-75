âœ… Java Code (Optimal Two-Pointer Approach)

class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int left = 0, right = height.length - 1;

        while (left < right) {
            int h = Math.min(height[left], height[right]);
            int w = right - left;
            max = Math.max(max, h * w);

            // Move pointer which has smaller height
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return max;
    }
}


ðŸ“˜ Explanation (Line-by-Line)

int max = 0;
ðŸ”¹ Ab tak ka maximum area store karne ke liye variable.

int left = 0, right = height.length - 1;
ðŸ”¹ 2 pointer technique: Ek array ke start par (left) aur ek end par (right).

while (left < right) {
ðŸ”¹ Jab tak left aur right pointers ek dusre ko cross nahi karte.

  int h = Math.min(height[left], height[right]);
  ðŸ”¹ Dono boundaries me se chhoti height lete hain (kyunki water wahin tak bharega).

  int w = right - left;
  ðŸ”¹ Width nikaali â†’ right aur left ke beech ka distance.

  max = Math.max(max, h * w);
  ðŸ”¹ Max area update kiya (height Ã— width).

  if (height[left] < height[right]) {
    left++;
    ðŸ”¹ Chhoti boundary ko move karo (chance zyada area ka badhne ka hai).
  } else {
    right--;
    ðŸ”¹ Right side chhoti hai toh usse move karo.
  }
}

return max;
ðŸ”¹ Sabse bada area return kar do.

ðŸ§  Example Input:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: Water is stored between index 1 and 8 â†’ min(8, 7) Ã— (8 - 1) = 49
ðŸš€ Time & Space Complexity:

Time: O(n)

Space: O(1)

ðŸ”— Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/