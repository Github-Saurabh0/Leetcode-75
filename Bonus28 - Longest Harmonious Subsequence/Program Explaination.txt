✅ LeetCode 594 – Longest Harmonious Subsequence

public class Solution {
    public int findLHS(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        int maxLen = 0;

        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        for (int key : map.keySet()) {
            if (map.containsKey(key + 1)) {
                maxLen = Math.max(maxLen, map.get(key) + map.get(key + 1));
            }
        }

        return maxLen;
    }
}

Explanation

Map<Integer, Integer> map = new HashMap<>();
🔹 Har number ka count store karne ke liye frequency map bana rahe hain.

for (int num : nums)
 map.put(num, map.getOrDefault(num, 0) + 1);

🔹 Har element ka occurrence count update karte ja rahe hain.

for (int key : map.keySet())
🔹 Har unique element par loop kar rahe hain.

if (map.containsKey(key + 1))
 maxLen = Math.max(maxLen, map.get(key) + map.get(key + 1));

🔹 Check kar rahe hain kya key ke next element (key + 1) bhi present hai.
Agar haan, toh key aur key+1 dono milke ek harmonious subsequence banayenge.
Unka combined count (frequency) hi subsequence length hoga.

return maxLen;
🔹 Sabse longest valid subsequence ka length return kar diya.

🧪 Example Dry Run
Input:
nums = [1,3,2,2,5,2,3,7]
Frequency Map:
1→1, 2→3, 3→2, 5→1, 7→1

Valid Pairs:

1 & 2 → 1 + 3 = 4

2 & 3 → 3 + 2 = 5 ✅

3 & 4 ❌

5 & 6 ❌

7 & 8 ❌

Output: 5

Time & Space Complexity
Item	Complexity
Time	O(N)
Space	O(N)

🔗 Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/