âœ… LeetCode 2099 â€“ Find Subsequence of Length K With the Largest Sum

class Solution {
    public int[] maxSubsequence(int[] nums, int k) {
        int n = nums.length;
        int[][] pair = new int[n][2];

        for (int i = 0; i < n; i++) {
            pair[i][0] = nums[i]; // value
            pair[i][1] = i;       // index
        }

        Arrays.sort(pair, (a, b) -> b[0] - a[0]); // sort descending by value

        Arrays.sort(pair, 0, k, (a, b) -> a[1] - b[1]); // sort top-k by index

        int[] res = new int[k];
        for (int i = 0; i < k; i++) {
            res[i] = pair[i][0];
        }

        return res;
    }
}

Explanation
int[][] pair = new int[n][2];
ðŸ”¹ Har number ke saath uska original index bhi store kar rahe hain.
pair[i][0] = value, pair[i][1] = original index

Arrays.sort(pair, (a, b) -> b[0] - a[0]);
ðŸ”¹ Array ko value ke basis par descending order me sort kar diya.
Taaki sabse bade k elements mil jaayein.

Arrays.sort(pair, 0, k, (a, b) -> a[1] - b[1]);
ðŸ”¹ Top k elements mil gaye, lekin ab unhe original order me chahiye.
Isliye un k elements ko index ke basis par sort kar diya.

int[] res = new int[k];
for (int i = 0; i < k; i++) res[i] = pair[i][0];

ðŸ”¹ Final answer banaya by extracting values from sorted top-k elements (jo ab original order me hain).

Example Dry Run
Input:
nums = [3,4,3,3], k = 2
Step 1 (Pair + Sort by Value):
[(4,1), (3,0), (3,2), (3,3)]

Step 2 (Top k = 2):
[(4,1), (3,0)]

Step 3 (Sort by Index):
[(3,0), (4,1)]

Output:
[3, 4]

Time & Space Complexity
Item	Complexity
Time	O(N log N)
Space	O(N)

Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/