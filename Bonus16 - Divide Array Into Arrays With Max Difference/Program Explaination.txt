Java Code (Returns int[][])


class Solution {
    public int[][] divideArray(int[] nums, int k) {
        Arrays.sort(nums);
        int[][] res = new int[nums.length / 3][3];
        int idx = 0;

        for (int i = 0; i < nums.length; i += 3) {
            if (nums[i + 2] - nums[i] > k) return new int[0][];
            res[idx][0] = nums[i];
            res[idx][1] = nums[i + 1];
            res[idx][2] = nums[i + 2];
            idx++;
        }

        return res;
    }
}


ğŸ“˜ Explanation

Arrays.sort(nums);
ğŸ”¹ Sabse pehle array ko sort kiya â€” taaki adjacent elements ka difference minimal ho.

int[][] res = new int[nums.length / 3][3];
ğŸ”¹ Result array banaya jisme har row 3 elements ka ek group hoga.

int idx = 0;
ğŸ”¹ res array ka index track karne ke liye.

for (int i = 0; i < nums.length; i += 3)
ğŸ”¹ Har 3 elements ka group check karne ke liye 3-3 ke step mein loop chala rahe hain.

if (nums[i + 2] - nums[i] > k) return new int[0][];
ğŸ”¹ Agar current group ka max - min > k hai, toh empty result return kar do (invalid case).

res[idx][0] = nums[i];
res[idx][1] = nums[i + 1];
res[idx][2] = nums[i + 2];
ğŸ”¹ Valid group ko 2D array mein daal diya.

idx++;
ğŸ”¹ Next row ke liye index badha diya.

return res;
ğŸ”¹ Final 2D array return kar diya.

Example
Input: nums = [1,3,4,8,7,9], k = 2
Sorted: [1,3,4,7,8,9]
Groups: [1,3,4] â†’ âœ…, [7,8,9] â†’ âœ…
Output: [[1,3,4],[7,8,9]]

Time & Space Complexity
Time: O(n log n) (sort)
Space: O(n) (for result array)

ğŸ”— Facing any issue or want more Java tricks?
Connect here â†’ https://www.linkedin.com/in/saurabh884095/