âœ… Java Code (Clean, Fast, Accurate Parsing)

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();

        int top = 0;
        int bottom = matrix.length - 1;
        int left = 0;
        int right = matrix[0].length - 1;

        while (top <= bottom && left <= right) {
            // Left â†’ Right
            for (int i = left; i <= right; i++)
                result.add(matrix[top][i]);
            top++;

            // Top â†’ Bottom
            for (int i = top; i <= bottom; i++)
                result.add(matrix[i][right]);
            right--;

            // Right â†’ Left
            if (top <= bottom) {
                for (int i = right; i >= left; i--)
                    result.add(matrix[bottom][i]);
                bottom--;
            }

            // Bottom â†’ Top
            if (left <= right) {
                for (int i = bottom; i >= top; i--)
                    result.add(matrix[i][left]);
                left++;
            }
        }

        return result;
    }
}


ðŸ“˜ Explanation (Line-by-Line)

List<Integer> result = new ArrayList<>();
ðŸ”¹ Output list banayi jisme result store hoga.

int top = 0, bottom = matrix.length - 1;
int left = 0, right = matrix[0].length - 1;
ðŸ”¹ Matrix ki boundaries define ki - top, bottom, left, right.

while (top <= bottom && left <= right)
ðŸ”¹ Jab tak 4 boundaries valid hai, tab tak loop chalega.

for (int i = left; i <= right; i++) result.add(matrix[top][i]);
ðŸ”¹ Left to Right traverse top row mein.

top++;
ðŸ”¹ Top boundary niche le aaye.

for (int i = top; i <= bottom; i++) result.add(matrix[i][right]);
ðŸ”¹ Top to Bottom traverse right column mein.

right--;
ðŸ”¹ Right boundary left le aaye.

if (top <= bottom)
ðŸ”¹ Check kiya bottom row valid hai ya nahi.

for (int i = right; i >= left; i--) result.add(matrix[bottom][i]);
ðŸ”¹ Right to Left traverse bottom row mein.

bottom--;
ðŸ”¹ Bottom boundary upar le aaye.

if (left <= right)
ðŸ”¹ Check kiya left column valid hai ya nahi.

for (int i = bottom; i >= top; i--) result.add(matrix[i][left]);
ðŸ”¹ Bottom to Top traverse left column mein.

left++;
ðŸ”¹ Left boundary right le aaye.

return result;
ðŸ”¹ Final spiral list return ki.

ðŸ§  Example
Input:
[[1,2,3],
[4,5,6],
[7,8,9]]

Steps:
â†’ Top row: 1 2 3
â†’ Right col: 6 9
â†’ Bottom row: 8 7
â†’ Left col: 4
â†’ Center: 5

âœ… Output: [1,2,3,6,9,8,7,4,5]

ðŸš€ Time and Space Complexity
Time: O(m * n) â†’ Har element ek baar visit hota hai
Space: O(1) â†’ Extra space nahi liya (excluding output list)

ðŸ”— If any need please ask me:
https://www.linkedin.com/in/saurabh884095/