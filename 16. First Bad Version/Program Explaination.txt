✅ Leetcode 278: First Bad Version (Java Solution — O(log n) Time)

🔧 Optimal Java Code (Binary Search):

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int left = 1;
        int right = n;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (isBadVersion(mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }
}

📝 Explanation (Line-by-Line):

int left = 1;
int right = n;
➡️ Binary search ke liye start aur end point define kiye.

while (left < right) {
➡️ Jab tak search space valid hai, loop chalayenge.

    int mid = left + (right - left) / 2;
    ➡️ Overflow avoid karne ke liye yeh tarika use kiya.

    if (isBadVersion(mid)) {
        right = mid;
    } else {
        left = mid + 1;
    }
}
➡️ Agar mid version bad hai, toh pehla bad mid ya usse pehle ho sakta hai.
➡️ Agar mid bad nahi hai, toh left ko mid + 1 set karo.

return left;
➡️ Jab loop khatam hoga, left bad version ko point karega.

🧠 Time Complexity:
➡️ O(log n) — Binary search use kar rahe hain.

🧠 Space Complexity:
➡️ O(1) — No extra space used.

🔗 If any need please ask me: https://www.linkedin.com/in/saurabh884095/