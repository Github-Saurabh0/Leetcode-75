LeetCode 42 â€“ Trapping Rain Water

class Solution {
    public int trap(int[] height) {
        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0;
        int water = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax)
                    leftMax = height[left];
                else
                    water += leftMax - height[left];
                left++;
            } else {
                if (height[right] >= rightMax)
                    rightMax = height[right];
                else
                    water += rightMax - height[right];
                right--;
            }
        }

        return water;
    }
}

Explanation

int left = 0, right = height.length - 1;
ðŸ”¹ 2 pointers: ek array ke start par, dusra end par.

int leftMax = 0, rightMax = 0;
ðŸ”¹ Left aur right se max height track karne ke liye.

int water = 0;
ðŸ”¹ Total paani ka amount track karne ke liye.

while (left < right)
ðŸ”¹ Jab tak left aur right pointer cross na karein.

if (height[left] < height[right])
ðŸ”¹ Agar left ki height chhoti hai â†’ left side control karega.

    if (height[left] >= leftMax)
        leftMax = height[left];
    ðŸ”¹ Agar current height zyada hai, toh update karo.

    else
        water += leftMax - height[left];
    ðŸ”¹ Otherwise, trap kiya gaya paani = leftMax - current height

    left++;
ðŸ”¹ Move left pointer to right

else
ðŸ”¹ Agar right side chhoti ya equal hai

    if (height[right] >= rightMax)
        rightMax = height[right];

    else
        water += rightMax - height[right];

    right--;
	
ðŸ”¹ Move right pointer to left

 Example:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]

Water trapped:
â†’ Total = 6 units

LeftMax: 0 1 1 2 2 2 2 3 3 3 3 3  
RightMax:3 3 3 3 3 3 3 3 2 2 2 1

Time & Space Complexity
Metric	Complexity
Time	O(n)
Space	O(1)
Two pointer solution is optimal in both time and space.	

ðŸ”— Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/