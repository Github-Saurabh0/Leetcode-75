âœ… Java Code (Optimized Linear Solution)

class Solution {
    public int maxAdjacentDistance(int[] nums) {
        int n = nums.length;
        int maxDiff = 0;

        for (int i = 0; i < n; i++) {
            int diff = Math.abs(nums[i] - nums[(i + 1) % n]); // circular diff
            maxDiff = Math.max(maxDiff, diff);
        }

        return maxDiff;
    }
}



ðŸ“˜ Explanation (Line-by-Line)
int n = nums.length;
ðŸ”¹ Array ka size store kiya n me.

int maxDiff = 0;
ðŸ”¹ Maximum difference ko track karne ke liye variable.

for (int i = 0; i < n; i++) {
ðŸ”¹ Har index i par loop chalayenge.

int diff = Math.abs(nums[i] - nums[(i + 1) % n]);
ðŸ”¹ Adjacent elements ka absolute difference nikaal rahe hain.
ðŸ”¹ (i + 1) % n se circular behavior handle ho gaya â€” last and first bhi check ho jaate hain.

maxDiff = Math.max(maxDiff, diff);
ðŸ”¹ Har difference ke baad max value update karte jaa rahe hain.

return maxDiff;
ðŸ”¹ Sabse bada adjacent circular difference return karo.

ðŸš€ Time and Space Complexity
Time: O(n) â†’ Single pass through the array

Space: O(1) â†’ No extra space used

ðŸ§  Example
Input: [10, 20, 5, 8]
Adjacent diffs:

|10 - 20| = 10

|20 - 5| = 15

|5 - 8| = 3

|8 - 10| = 2 (circular)

âœ… Maximum = 15

ðŸ”— If any need please ask me:
https://www.linkedin.com/in/saurabh884095/