âœ… Java Code (DP - 0/1 Knapsack)


class Solution {
    public boolean canPartition(int[] nums) {
        int total = 0;
        for (int num : nums) {
            total += num;  // sab numbers ka sum nikalo
        }

        if (total % 2 != 0) {
            return false;  // agar total odd hai toh equal 2 parts possible nahi
        }

        int target = total / 2;  // hume sum = total/2 ka subset chahiye
        boolean[] dp = new boolean[target + 1];
        dp[0] = true;  // 0 sum toh empty subset se ho hi sakta hai

        for (int num : nums) {
            for (int i = target; i >= num; i--) {
                // is sum i tak pahuchne ka ek tareeka hai ki i - num pe already true ho
                dp[i] = dp[i] || dp[i - num];
            }
        }

        return dp[target];  // kya target sum possible hai?
    }
}


ğŸ“˜ Explanation (Line-by-Line)
int total = 0;
ğŸ”¹ sab elements ka total nikala.

if (total % 2 != 0)
ğŸ”¹ agar total odd hai, toh 2 equal parts me baantna impossible.

int target = total / 2;
ğŸ”¹ hume check karna hai koi subset hai jiska sum = target.

boolean[] dp = new boolean[target + 1];
ğŸ”¹ dp[i] = kya i sum possible hai kisi subset se?

dp[0] = true;
ğŸ”¹ 0 sum hamesha possible hota hai (kisi bhi element ke bina).

Outer loop: for (int num : nums)
ğŸ”¹ har number ke liye check karo ki uske use se kya naya sum ban sakta hai.

Inner loop: for (int i = target; i >= num; i--)
ğŸ”¹ reverse me loop chala rahe hain taaki dp[i - num] purani value ho (not overwritten).

dp[i] = dp[i] || dp[i - num];
ğŸ”¹ agar i - num pe true hai, toh i bhi true ban jaayega.

ğŸ§  Example
Input: nums = [1, 5, 11, 5]

Total = 22, Target = 11

dp[11] tak pahuchna hai

âœ… Subset [11] ya [5, 5, 1] se ho jaata hai â†’ return true.

ğŸš€ Time and Space Complexity
Time: O(n Ã— sum/2)

Space: O(sum/2) â†’ 1D DP optimized

ğŸ”— If any need please ask me:
https://www.linkedin.com/in/saurabh884095/