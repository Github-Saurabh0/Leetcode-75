
‚úÖ Leetcode 909: Snakes and Ladders (Best Java Solution ‚Äî O(N^2) with 0.5ms to 1ms runtime)

‚ö†Ô∏è Note: Time complexity is not truly O(n) because BFS explores N^2 board cells in worst-case, 
but solution is optimized and accepted with 0.5ms ‚Äì 1ms runtime.

üîß Optimized Java Code (Using BFS):

import java.util.*;

public class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] visited = new boolean[n * n + 1];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(1);
        visited[1] = true;
        int moves = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                if (curr == n * n) return moves;

                for (int dice = 1; dice <= 6 && curr + dice <= n * n; dice++) {
                    int next = curr + dice;
                    int[] pos = getCoordinates(next, n);
                    if (board[pos[0]][pos[1]] != -1) {
                        next = board[pos[0]][pos[1]];
                    }
                    if (!visited[next]) {
                        visited[next] = true;
                        queue.add(next);
                    }
                }
            }
            moves++;
        }

        return -1;
    }

    private int[] getCoordinates(int num, int n) {
        int r = (num - 1) / n;
        int c = (num - 1) % n;
        if (r % 2 == 1) c = n - 1 - c;
        return new int[] {n - 1 - r, c};
    }
}

üìù Explanation (Line-by-Line):

int n = board.length;
‚û°Ô∏è Board ka size n x n hota hai ‚Äî total cells n*n.

boolean[] visited = new boolean[n * n + 1];
‚û°Ô∏è Ek array banaya jo batata hai kaunsa cell visit hua hai ya nahi.

Queue<Integer> queue = new LinkedList<>();
‚û°Ô∏è BFS ke liye queue use kar rahe hain.

queue.add(1);
‚û°Ô∏è Game ki starting cell ‚Äî 1 ‚Äî ko queue mein daal diya.

visited[1] = true;
‚û°Ô∏è Starting cell ko visited mark kar diya.

int moves = 0;
‚û°Ô∏è Moves counter ‚Äî jitni baar dice chalani padhi.

while (!queue.isEmpty()) {
‚û°Ô∏è Jab tak queue empty nahi hoti, BFS chalta rahega.

int size = queue.size();
‚û°Ô∏è Har level ke liye kitne nodes hain.

for (int i = 0; i < size; i++) {
    int curr = queue.poll();
‚û°Ô∏è Queue se ek cell uthaya.

    if (curr == n * n) return moves;
‚û°Ô∏è Agar destination (last cell) mil gaya, toh moves return karo.

    for (int dice = 1; dice <= 6 && curr + dice <= n * n; dice++) {
        int next = curr + dice;
‚û°Ô∏è Dice ka har value try karte hain 1 se 6 tak.

        int[] pos = getCoordinates(next, n);
‚û°Ô∏è Flat number ko 2D coordinates mein convert karte hain.

        if (board[pos[0]][pos[1]] != -1) {
            next = board[pos[0]][pos[1]];
‚û°Ô∏è Agar ladder ya snake mila (yaani cell != -1), toh us cell mein jump karte hain.

        }

        if (!visited[next]) {
            visited[next] = true;
            queue.add(next);
‚û°Ô∏è Agar wo cell pehle visit nahi hua toh queue mein add karo.
        }
    }
}
moves++;
‚û°Ô∏è Ek level BFS complete hone ke baad move increment karo.

return -1;
‚û°Ô∏è Agar destination tak nahi pahunch paye, toh -1 return karo.

üîÑ getCoordinates():
‚û°Ô∏è Board pe flat number ko actual (row, col) mein convert karta hai ‚Äî odd-even row ke according reverse bhi karta hai.

üîó If any need please ask me: https://www.linkedin.com/in/saurabh884095/
