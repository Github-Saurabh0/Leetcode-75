âœ… Java Code (Clean, Fast, Accurate Parsing)

class Solution {
    public int myAtoi(String s) {
        int i = 0, n = s.length();
        int sign = 1;
        long result = 0;

        // Step 1: Skip leading whitespaces
        while (i < n && s.charAt(i) == ' ') {
            i++;
        }

        // Step 2: Check for optional sign
        if (i < n && (s.charAt(i) == '+' || s.charAt(i) == '-')) {
            sign = (s.charAt(i) == '-') ? -1 : 1;
            i++;
        }

        // Step 3: Convert digits to number
        while (i < n && Character.isDigit(s.charAt(i))) {
            int digit = s.charAt(i) - '0';
            result = result * 10 + digit;

            // Step 4: Check for overflow
            if (sign * result > Integer.MAX_VALUE) return Integer.MAX_VALUE;
            if (sign * result < Integer.MIN_VALUE) return Integer.MIN_VALUE;

            i++;
        }

        return (int)(sign * result);
    }
}

ðŸ“˜ Explanation (Line-by-Line)
int i = 0, n = s.length();
ðŸ”¹ Pointer i se string scan karenge, n length store kar liya.

while (i < n && s.charAt(i) == ' ')
ðŸ”¹ Leading whitespaces ko skip kar rahe hain.

if (i < n && (s.charAt(i) == '+' || s.charAt(i) == '-'))
ðŸ”¹ Agar + ya - mile toh sign set karo aur i++.

while (i < n && Character.isDigit(s.charAt(i)))
ðŸ”¹ Jab tak digit milte rahein, unka number banao.

result = result * 10 + digit;
ðŸ”¹ Har digit add karke number banate jaa rahe hain (left shift).

if (sign * result > Integer.MAX_VALUE)
ðŸ”¹ Overflow check â†’ return 2147483647

if (sign * result < Integer.MIN_VALUE)
ðŸ”¹ Underflow check â†’ return -2147483648

return (int)(sign * result);
ðŸ”¹ Final result return karo with proper sign.

ðŸ§  Example
Input: " -42"
Steps:

Skip spaces â†’ -42

Sign â†’ -1

Number â†’ 42

Result â†’ -42

âœ… Output: -42

ðŸš€ Time and Space Complexity
Time: O(n) â†’ Traverse input string once

Space: O(1) â†’ No extra space

ðŸ”— If any need please ask me:
https://www.linkedin.com/in/saurabh884095/