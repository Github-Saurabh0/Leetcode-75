âœ… Java Code (Clean & Easy to Understand)

class Solution {
    public int maximumDifference(int[] nums) {
        int min = nums[0];
        int maxDiff = -1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > min) {
                maxDiff = Math.max(maxDiff, nums[i] - min);
            } else {
                min = nums[i]; // Update min if current is smaller
            }
        }

        return maxDiff;
    }
}


ğŸ“˜  Explanation (Line-by-Line)

int min = nums[0];
ğŸ”¹ Pehle element ko minimum assume kar rahe hain (ab tak ka sabse chhota).

int maxDiff = -1;
ğŸ”¹ Default -1 return karenge agar increasing pair na mila.

for (int i = 1; i < nums.length; i++) {
ğŸ”¹ Loop start karte hain second element se.

  if (nums[i] > min) {
    maxDiff = Math.max(maxDiff, nums[i] - min);
    ğŸ”¹ Jab current number, ab tak ke min se bada ho â†’ diff nikalo.
  } else {
    min = nums[i];
    ğŸ”¹ Agar chhota number milta hai, toh min ko update kar do.
  }
}

return maxDiff;
ğŸ”¹ Final answer return karo.

ğŸ§  Example Input:

Input: nums = [7,1,5,4]
Output: 4
Explanation: 5 - 1 = 4 is the maximum difference where 5 comes after 1.
ğŸš€ Time & Space Complexity:

Time: O(n) â†’ Single pass

Space: O(1) â†’ No extra space

ğŸ”— Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/