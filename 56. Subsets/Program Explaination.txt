âœ… Java Code (Clean, Fast, Accurate Parsing)

import java.util.*;

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        generateSubsets(0, nums, new ArrayList<>(), result);
        return result;
    }

    private void generateSubsets(int index, int[] nums, List<Integer> current, List<List<Integer>> result) {
        if (index == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        // Include current element
        current.add(nums[index]);
        generateSubsets(index + 1, nums, current, result);

        // Exclude current element
        current.remove(current.size() - 1);
        generateSubsets(index + 1, nums, current, result);
    }
}


ğŸ“˜ Explanation (Line-by-Line)

List<List<Integer>> result = new ArrayList<>();
ğŸ”¹ Subsets store karne ke liye final result list banayi.

generateSubsets(0, nums, new ArrayList<>(), result);
ğŸ”¹ Recursion shuru ki from index 0, with empty current list.

Function: generateSubsets(index, nums, current, result)

if (index == nums.length)
ğŸ”¹ Base case: pura array traverse ho gaya â†’ current list ko result mein add karo.

current.add(nums[index]);
ğŸ”¹ Current element ko include kiya.

generateSubsets(index + 1, nums, current, result);
ğŸ”¹ Next index ke liye call kiya with current element included.

current.remove(current.size() - 1);
ğŸ”¹ Backtrack: ab current element ko exclude karenge.

generateSubsets(index + 1, nums, current, result);
ğŸ”¹ Next index ke liye call kiya with element excluded.

ğŸ§  Example

Input: nums = [1, 2]

Steps:

Include 1 â†’ Include 2 â†’ [1, 2]

Include 1 â†’ Exclude 2 â†’ [1]

Exclude 1 â†’ Include 2 â†’ [2]

Exclude 1 â†’ Exclude 2 â†’ []

âœ… Output: [[], [1], [2], [1,2]]

ğŸš€ Time and Space Complexity

Time: O(2^n)
ğŸ”¹ Har element ke liye 2 choices (include/exclude)

Space: O(n) (recursive call stack), O(2^n) for result list

ğŸ”— If any need please ask me:
https://www.linkedin.com/in/saurabh884095/