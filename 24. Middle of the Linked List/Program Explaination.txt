Leetcode 876: Middle of the Linked List - Java Solution (0ms, O(n) time)

-------------------------------------------

âœ… Java Code:

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;  // slow pointer ek step chalega
        ListNode fast = head;  // fast pointer do step chalega

        while (fast != null && fast.next != null) {
            slow = slow.next;        // slow ek step aage badhega
            fast = fast.next.next;   // fast do step aage badhega
        }
        return slow;  // jab fast end tak pahunch jaaye, slow middle node pe hoga
    }
}

-------------------------------------------


ðŸ§  Explanation Line by Line:

ListNode slow = head;
â†’ Slow pointer start mein head pe rakha.

ListNode fast = head;
â†’ Fast pointer bhi head se start karega.

while (fast != null && fast.next != null)
â†’ Jab tak fast pointer list ke end tak na pohonche, loop chalta rahega.

slow = slow.next;
â†’ Slow pointer ek node aage badhta hai.

fast = fast.next.next;
â†’ Fast pointer do nodes aage badhta hai.

return slow;
â†’ Jab fast end tak pahunch jaye, slow middle pe hoga, use return karte hain.

ðŸ“Œ Example:
Input: head = [1,2,3,4,5]
Output: Node with value 3 (middle node)

For any doubt or help, feel free to connect:
ðŸ”— https://www.linkedin.com/in/saurabh884095/