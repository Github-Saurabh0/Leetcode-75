✅ Leetcode 46: Permutations – Java (0ms, O(n!))

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, new boolean[nums.length], new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] nums, boolean[] used,
                           List<Integer> current, List<List<Integer>> result) {
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (used[i]) continue; // already used
            used[i] = true;
            current.add(nums[i]);
            backtrack(nums, used, current, result);
            current.remove(current.size() - 1); // backtrack
            used[i] = false;
        }
    }
}


🧠  Explanation Line by Line:
List<List<Integer>> result = new ArrayList<>();
→ Final permutations ko store karne ke liye list.

backtrack(nums, new boolean[nums.length], new ArrayList<>(), result);
→ Start backtracking with used[] to track selected elements.

if (current.size() == nums.length)
→ Agar current permutation complete ho gaya, toh result me add karo.

for (int i = 0; i < nums.length; i++)
→ Har element ke liye try karenge.

if (used[i]) continue;
→ Agar already used hai, skip karo.

used[i] = true;
→ Mark element as used.

current.add(nums[i]);
→ Element ko current permutation me add karo.

backtrack(...)
→ Recursively aage badho.

current.remove(current.size() - 1);
→ Backtrack: last element hatao.

used[i] = false;
→ Mark element as unused for next loop.

📌 Example:
Input:
nums = [1, 2, 3]

Output:
[[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]
⏱️ Time & Space Complexity:
Time: O(n!) – All permutations

Space: O(n) – Recursion depth and used array

Feel free to connect if you want to explore more:
🔗 https://www.linkedin.com/in/saurabh884095/