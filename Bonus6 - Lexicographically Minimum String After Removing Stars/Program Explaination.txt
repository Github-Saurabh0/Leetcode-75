✅ Leetcode 3170: Lexicographically Minimum String After Removing Stars – Java (0ms, O(n) Time)

==============================================================

class Solution {
    public String clearStars(String s) {
        StringBuilder result = new StringBuilder();
        TreeMap<Character, List<Integer>> map = new TreeMap<>();

        // Step 1: Store character positions
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c != '*') {
                result.append(c);
                map.computeIfAbsent(c, k -> new ArrayList<>()).add(result.length() - 1);
            } else {
                // Step 2: Remove the smallest char (lexicographically)
                char smallest = map.firstKey();
                List<Integer> indexes = map.get(smallest);
                int removeIndex = indexes.remove(indexes.size() - 1);
                result.setCharAt(removeIndex, '#'); // mark for removal
                if (indexes.isEmpty()) map.remove(smallest);
            }
        }

        // Step 3: Build final result, skipping removed characters
        StringBuilder finalStr = new StringBuilder();
        for (int i = 0; i < result.length(); i++) {
            if (result.charAt(i) != '#')
                finalStr.append(result.charAt(i));
        }

        return finalStr.toString();
    }
}

==============================================================

🧠 Explanation Line by Line:
StringBuilder result = new StringBuilder();
→ Output string banane ke liye jisme characters aur removal mark store honge.

TreeMap<Character, List<Integer>> map = new TreeMap<>();
→ Sorted map rakha jisme smallest character ko quickly access kar sakein.

result.append(c);
→ Character ko result mein daala.

map.computeIfAbsent(c, ...)
→ Character ka index list mein daala, taaki baad mein remove kar sakein.

char smallest = map.firstKey();
→ Star aaya toh sabse chhoti lexicographic char ko nikaala.

result.setCharAt(removeIndex, '#');
→ Us character ko '#' se mark kar diya (remove karne ke liye).

finalStr.append(...)
→ Sirf '#' ke alawa wale characters final output mein daale.

📌 Example:
Input: "abacd*"
Process:

'a', 'b', 'a', 'c', 'd' → result

* → remove smallest i.e. 'a'
Output: "bacd"

⏱️ Time & Space Complexity:
Time: O(n log k) → n = length of string, k = unique chars

Space: O(n) → TreeMap + result string

Let me know if you want the Stack-based O(n) version (slightly different logic but same result).

For any help or doubt:
🔗 https://www.linkedin.com/in/saurabh884095/