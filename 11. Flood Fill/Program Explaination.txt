
‚úÖ Leetcode 733: Flood Fill (Java Solution ‚Äî 0ms Runtime, O(m * n) Time Complexity)

üîß Optimal Java Code (DFS Approach):

public class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int startColor = image[sr][sc];
        if (startColor != color) {
            dfs(image, sr, sc, startColor, color);
        }
        return image;
    }

    private void dfs(int[][] image, int r, int c, int color, int newColor) {
        if (r < 0 || r >= image.length || c < 0 || c >= image[0].length || image[r][c] != color)
            return;

        image[r][c] = newColor;

        dfs(image, r + 1, c, color, newColor);
        dfs(image, r - 1, c, color, newColor);
        dfs(image, r, c + 1, color, newColor);
        dfs(image, r, c - 1, color, newColor);
    }
}

üìù Explanation (Line-by-Line):

int startColor = image[sr][sc];
‚û°Ô∏è Start point ke original color ko store kiya.

if (startColor != color) {
    dfs(image, sr, sc, startColor, color);
}
‚û°Ô∏è Agar start color already new color se alag hai, tabhi DFS lagayenge.

private void dfs(int[][] image, int r, int c, int color, int newColor) {
‚û°Ô∏è DFS helper function jo 4 directions me jaake color change karega.

if (r < 0 || r >= image.length || c < 0 || c >= image[0].length || image[r][c] != color)
    return;
‚û°Ô∏è Agar index out of bounds ho ya current color match na kare toh stop karo.

image[r][c] = newColor;
‚û°Ô∏è Pixel ka color change kar diya.

dfs(image, r + 1, c, color, newColor);
dfs(image, r - 1, c, color, newColor);
dfs(image, r, c + 1, color, newColor);
dfs(image, r, c - 1, color, newColor);
‚û°Ô∏è 4 directions me recursively spread kar rahe hain.

üß† Time Complexity:
‚û°Ô∏è O(m * n) ‚Äî Poore grid me worst-case me sabhi cells visit ho sakte hain.

üß† Space Complexity:
‚û°Ô∏è O(m * n) ‚Äî Recursive stack space for DFS.

üîó If any need please ask me: https://www.linkedin.com/in/saurabh884095/
