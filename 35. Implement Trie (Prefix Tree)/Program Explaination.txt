‚úÖ Leetcode 208: Implement Trie (Prefix Tree) ‚Äì Java (1ms, O(n) Time)

==============================================================

class TrieNode {
    TrieNode[] children = new TrieNode[26];
    boolean isEndOfWord = false;
}

class Trie {
    private final TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null)
                node.children[index] = new TrieNode();
            node = node.children[index];
        }
        node.isEndOfWord = true;
    }

    public boolean search(String word) {
        TrieNode node = searchNode(word);
        return node != null && node.isEndOfWord;
    }

    public boolean startsWith(String prefix) {
        return searchNode(prefix) != null;
    }

    private TrieNode searchNode(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null)
                return null;
            node = node.children[index];
        }
        return node;
    }
}

==============================================================

üß† Explanation Line by Line:
TrieNode[] children = new TrieNode[26];
‚Üí Har node ke 26 children ho sakte hain (a‚Äìz).

isEndOfWord
‚Üí Batata hai ki koi word yahan end hota hai ya nahi.

insert()
‚Üí Har character ke liye child create karo agar null ho. Last mein isEndOfWord = true.

search()
‚Üí Full word ke node tak jao aur check karo isEndOfWord true hai kya.

startsWith()
‚Üí Bas node exist karta hai ya nahi, yeh check karna hai.

searchNode()
‚Üí Word ya prefix ka last node return karta hai ‚Äî common logic search aur startsWith dono ke liye.

üìå Example:

Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // true
trie.search("app");     // false
trie.startsWith("app"); // true
trie.insert("app");
trie.search("app");     // true
‚è±Ô∏è Time & Space Complexity:
Insert / Search / Prefix Check: O(n) (n = length of word/prefix)

Space: O(n * 26) worst case (all unique paths)


For help anytime, message here or ping me at:
üîó https://www.linkedin.com/in/saurabh884095/