
✅ Leetcode 125: Valid Palindrome (Highly Optimized Java Solution — 0.7ms to 0.8ms)

🔧 Java Code (Fastest Approach Using ASCII Checks):

public class Solution1 {
    public boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        char c1, c2;

        while (left < right) {
            c1 = s.charAt(left);
            c2 = s.charAt(right);

            if (!((c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z') || (c1 >= '0' && c1 <= '9'))) {
                left++;
                continue;
            }

            if (!((c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z') || (c2 >= '0' && c2 <= '9'))) {
                right--;
                continue;
            }

            if (c1 >= 'A' && c1 <= 'Z') c1 += 32;
            if (c2 >= 'A' && c2 <= 'Z') c2 += 32;

            if (c1 != c2) return false;

            left++;
            right--;
        }

        return true;
    }
}

📝 Explanation (Line-by-Line):

public class Solution {
➡️ Leetcode ke format ke hisaab se class define ki gayi hai.

public boolean isPalindrome(String s) {
➡️ Function isPalindrome ek string leta hai aur check karta hai ki wo palindrome hai ya nahi.

int left = 0, right = s.length() - 1;
➡️ Do pointer banate hain: ek start se (left) aur ek end se (right).

char c1, c2;
➡️ Do character variables declare karte hain — left aur right wale character store karne ke liye.

while (left < right) {
➡️ Jab tak left pointer right se chhota hai, tab tak loop chalega.

c1 = s.charAt(left);
c2 = s.charAt(right);
➡️ Dono end ke character ko c1 aur c2 mein store karte hain.

if (!((c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z') || (c1 >= '0' && c1 <= '9'))) {
    left++;
    continue;
}
➡️ Agar c1 alphanumeric nahi hai, toh left pointer ko aage badha do aur loop continue karo.

if (!((c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z') || (c2 >= '0' && c2 <= '9'))) {
    right--;
    continue;
}
➡️ Same kaam right pointer ke liye karte hain — agar alphanumeric nahi hai toh skip karo.

if (c1 >= 'A' && c1 <= 'Z') c1 += 32;
➡️ Agar c1 uppercase hai, toh lowercase mein convert karte hain (ASCII mein 32 add karke).

if (c2 >= 'A' && c2 <= 'Z') c2 += 32;
➡️ Same cheez c2 ke liye bhi karte hain.

if (c1 != c2) return false;
➡️ Agar dono characters match nahi karte, toh string palindrome nahi hai — false return kar do.

left++;
right--;
➡️ Agar match ho gaya, toh dono pointers ko move karo.

return true;
➡️ Loop complete hone ke baad bhi mismatch nahi mila, toh return true — string palindrome hai.

🔗 If any need please ask me: https://www.linkedin.com/in/saurabh884095/
