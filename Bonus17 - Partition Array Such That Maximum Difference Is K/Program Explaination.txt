âœ… Java Code (Clean, Fast, Accurate Parsing)

class Solution {
    public int partitionArray(int[] nums, int k) {
        Arrays.sort(nums);
        int count = 1;
        int min = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] - min > k) {
                count++;
                min = nums[i];
            }
        }

        return count;
    }
}


ğŸ“˜ Explanation

Arrays.sort(nums);
ğŸ”¹ Sabse pehle array ko sort kar diya â€” taaki hum increasing order mein process kar sakein.

int count = 1;
ğŸ”¹ Kam se kam ek group toh hoga hi â€” isliye count = 1 se start kiya.

int min = nums[0];
ğŸ”¹ Pehle group ka starting point ya minimum value nums[0] set kiya.

for (int i = 1; i < nums.length; i++) {
ğŸ”¹ Index 1 se lekar end tak array ko traverse kiya.

if (nums[i] - min > k) {
ğŸ”¹ Agar current element aur group ka minimum ka difference k se zyada ho gaya...

count++;
ğŸ”¹ ...toh naya group banayenge â†’ isliye count ko badha diya.

min = nums[i];
ğŸ”¹ Naye group ka starting point ab current number ban gaya.

return count;
ğŸ”¹ Total number of groups return kar diya.

ğŸ§  Example
Input: nums = [3,6,1,2,5], k = 2
Sorted: [1,2,3,5,6]
Output: 2
Groups: [1,2,3], [5,6] â€” because in each group, max - min â‰¤ 2.

ğŸš€ Time and Space Complexity
Time: O(n log n) â†’ for sorting
Space: O(1) â†’ no extra space

ğŸ”— Facing any issue or want more Java tricks?
Connect here: https://www.linkedin.com/in/saurabh884095/