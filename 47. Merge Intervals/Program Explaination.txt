✅ Leetcode 56: Merge Intervals – Java (1ms, O(n log n))

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length <= 1) return intervals;

        Arrays.sort(intervals, (a, b) -> a[0] - b[0]); // Sort by start time

        List<int[]> merged = new ArrayList<>();
        int[] current = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            if (current[1] >= intervals[i][0]) {
                current[1] = Math.max(current[1], intervals[i][1]); // Merge
            } else {
                merged.add(current);
                current = intervals[i]; // Move to next
            }
        }

        merged.add(current); // Add last interval
        return merged.toArray(new int[merged.size()][]);
    }
}

🧠 Explanation Line by Line:
if (intervals.length <= 1) return intervals;
→ Agar sirf ek ya zero interval hai, merge karne ki zarurat nahi.

Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
→ Intervals ko unke start points ke basis par sort kar diya.

int[] current = intervals[0];
→ Pehla interval ko current maan ke kaam start karenge.

if (current[1] >= intervals[i][0])
→ Agar current interval ka end, next interval ke start se bada ya barabar hai – overlap ho raha hai.

current[1] = Math.max(current[1], intervals[i][1]);
→ End time ko update karo merge karte waqt.

else { merged.add(current); current = intervals[i]; }
→ Agar overlap nahi hai, current ko add karo aur naye interval pe shift ho jao.

merged.add(current);
→ Last interval ko result me add karna mat bhoolna.

return merged.toArray(...)
→ List ko 2D array me convert karke return karo.

📌 Example:
Input:
intervals = [[1,3],[2,6],[8,10],[15,18]]


Output:
[[1,6],[8,10],[15,18]]

⏱️ Time & Space Complexity:
Time: O(n log n) – Sorting

Space: O(n) – Result list

For any help or project collaboration, feel free to reach out:
🔗 https://www.linkedin.com/in/saurabh884095/








