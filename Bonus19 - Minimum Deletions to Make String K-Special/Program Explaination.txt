LeetCode 3085 â€“ Minimum Deletions to Make String K-Special 

class Solution {
    public int minimumDeletions(String word, int k) {
        int[] freq = new int[26];

        for (char c : word.toCharArray()) {
            freq[c - 'a']++;
        }

        Arrays.sort(freq);
        int res = Integer.MAX_VALUE;

        for (int i = 0; i < 26; i++) {
            if (freq[i] == 0) continue;

            int del = 0;
            for (int j = 0; j < 26; j++) {
                if (freq[j] == 0) continue;
                if (freq[j] < freq[i]) {
                    del += freq[j]; // delete all smaller
                } else if (freq[j] - freq[i] > k) {
                    del += freq[j] - (freq[i] + k); // reduce excess
                }
            }

            res = Math.min(res, del);
        }

        return res;
    }
}

Explanation

int[] freq = new int[26];
ðŸ”¹ 26 lowercase letters ke frequency count karne ke liye array.

for (char c : word.toCharArray())
ðŸ”¹ Har character ki frequency count kar li.

Arrays.sort(freq);
ðŸ”¹ Frequency array ko sort kar diya â†’ smallest to largest.

int res = Integer.MAX_VALUE;
ðŸ”¹ Minimum deletions store karne ke liye variable.

for (int i = 0; i < 26; i++)
ðŸ”¹ Har possible freq[i] ke liye assume kar rahe hain usse as minimum freq.

if (freq[i] == 0) continue;
ðŸ”¹ Agar koi character nahi mila toh skip.

int del = 0;
ðŸ”¹ Deletions count karne ke liye variable.

for (int j = 0; j < 26; j++)
ðŸ”¹ Har character ke liye check karenge ki freq[i] ke according adjust karna hai ya delete karna hai.

if (freq[j] == 0) continue;
ðŸ”¹ Agar koi character nahi hai toh skip.

if (freq[j] < freq[i])
ðŸ”¹ Agar freq[i] se chhota hai toh pura delete kar do.

else if (freq[j] - freq[i] > k)
ðŸ”¹ Agar allowed difference (k) se zyada hai toh extra occurrences delete karo.

res = Math.min(res, del);
ðŸ”¹ Minimum deletions update karo.

return res;
ðŸ”¹ Final answer return karo.

Example:
Input: word = "aabcabb", k = 1
Frequencies: a=3, b=3, c=1

â†’ To make all freq difference <= k,
Delete 'c' â†’ only 1 deletion needed.

Output: 1 
Time and Space Complexity:
Item	Complexity
Time	O(26Â²) = O(1) practically (constant)
Space	O(26) = O(1)

ðŸ”— Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/