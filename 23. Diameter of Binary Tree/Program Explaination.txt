Leetcode 543: Diameter of Binary Tree - Java Solution (0ms, O(n) time)

-------------------------------------------

âœ… Java Code:

class Solution {
    private int maxDiameter = 0;  // global variable for max diameter

    public int diameterOfBinaryTree(TreeNode root) {
        dfs(root);               // DFS call to calculate heights and update diameter
        return maxDiameter;      // return final max diameter
    }

    private int dfs(TreeNode node) {
        if (node == null) return 0;  // base case: null node ki height 0 hoti hai

        int leftHeight = dfs(node.left);    // left subtree ki height
        int rightHeight = dfs(node.right);  // right subtree ki height

        maxDiameter = Math.max(maxDiameter, leftHeight + rightHeight);
        // diameter update karo: leftHeight + rightHeight

        return 1 + Math.max(leftHeight, rightHeight);
        // current node ki height = 1 + max(left, right)
    }
}

-------------------------------------------

ðŸ§  Explanation Line by Line:

private int maxDiameter = 0;
â†’ Ye global variable hai jisme maximum diameter store karenge.

public int diameterOfBinaryTree(TreeNode root) {
â†’ Main function jo diameter return karega.

dfs(root);
â†’ DFS call karke har node ki height calculate karenge aur diameter update karenge.

return maxDiameter;
â†’ Max diameter return karenge after DFS completes.

private int dfs(TreeNode node) {
â†’ Recursive DFS function har node ki height calculate karta hai.

if (node == null) return 0;
â†’ Agar node null ho to height 0 consider karte hain.

int leftHeight = dfs(node.left);
â†’ Left subtree ki height recursive call se milti hai.

int rightHeight = dfs(node.right);
â†’ Right subtree ki height recursive call se milti hai.

maxDiameter = Math.max(maxDiameter, leftHeight + rightHeight);
â†’ Diameter update karte hain, jo ki left aur right height ka sum hota hai.

return 1 + Math.max(leftHeight, rightHeight);
â†’ Node ki height return karte hain: 1 (current node) plus max left ya right height.

ðŸ“Œ Example:
Input: root = [1,2,3,4,5]
Output: 3
Longest path: 4 â†’ 2 â†’ 1 â†’ 3 (3 edges)

For any doubt or help, feel free to connect:
ðŸ”— https://www.linkedin.com/in/saurabh884095/