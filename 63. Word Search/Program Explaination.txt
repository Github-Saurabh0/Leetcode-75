âœ… Java Code (DFS + Backtracking)

class Solution {
    public boolean exist(char[][] board, String word) {
        int rows = board.length, cols = board[0].length;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (dfs(board, word, i, j, 0)) {
                    return true;
                }
            }
        }

        return false;
    }

    private boolean dfs(char[][] board, String word, int i, int j, int index) {
        if (index == word.length()) return true;

        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length ||
            board[i][j] != word.charAt(index)) {
            return false;
        }

        char temp = board[i][j];
        board[i][j] = '#'; // mark as visited

        boolean found = dfs(board, word, i + 1, j, index + 1) ||
                        dfs(board, word, i - 1, j, index + 1) ||
                        dfs(board, word, i, j + 1, index + 1) ||
                        dfs(board, word, i, j - 1, index + 1);

        board[i][j] = temp; // unmark visited
        return found;
    }
}

ðŸ“˜ Explanation (Line-by-Line)

java
Copy
Edit
int rows = board.length, cols = board[0].length;
ðŸ”¹ Grid ke row aur column count store kiya.

for (int i = 0; i < rows; i++) {
  for (int j = 0; j < cols; j++) {
    if (dfs(board, word, i, j, 0)) return true;
    ðŸ”¹ Har cell se DFS start karke dekhte hain word ban sakta hai ya nahi.
  }
}

return false;
ðŸ”¹ Agar koi bhi path match nahi kiya toh false return.

private boolean dfs(...) {
  if (index == word.length()) return true;
  ðŸ”¹ Base case: agar word ka sab char match ho gaya.

  if (out of bounds || char mismatch) return false;
  ðŸ”¹ Agar boundary cross ho gayi ya character match nahi ho raha â†’ return false.

  char temp = board[i][j];
  board[i][j] = '#';
  ðŸ”¹ Visited mark kar diya temporarily to avoid reuse.

  boolean found = dfs in 4 directions;
  ðŸ”¹ 4 directions me check kiya agla character match hota hai ya nahi.

  board[i][j] = temp;
  ðŸ”¹ Backtrack karke cell ko wapas original char me restore kiya.

  return found;
}

ðŸ§  Example Input:

Input: board = [["A","B","C","E"],
                ["S","F","C","S"],
                ["A","D","E","E"]],
word = "ABCCED"
Output: true
ðŸš€ Time & Space Complexity:

Time: O(m Ã— n Ã— 4^L), where L is length of word

Space: O(L), recursion stack for DFS

ðŸ”— Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/