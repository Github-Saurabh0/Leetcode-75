224 â€“ Basic Calculator

class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int num = 0, result = 0, sign = 1;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (Character.isDigit(c)) {
                num = num * 10 + (c - '0');
            } else if (c == '+') {
                result += sign * num;
                num = 0;
                sign = 1;
            } else if (c == '-') {
                result += sign * num;
                num = 0;
                sign = -1;
            } else if (c == '(') {
                stack.push(result);
                stack.push(sign);
                result = 0;
                sign = 1;
            } else if (c == ')') {
                result += sign * num;
                num = 0;
                result *= stack.pop();  // sign before '('
                result += stack.pop();  // result before '('
            }
        }

        result += sign * num;
        return result;
    }
}


Explanation
Stack<Integer> stack = new Stack<>();
ğŸ”¹ Stack ka use parentheses ke andar ka result store karne ke liye kiya jaata hai.

int num = 0, result = 0, sign = 1;
ğŸ”¹ num â†’ current number
ğŸ”¹ result â†’ ab tak ka total
ğŸ”¹ sign â†’ current sign (1 for '+', -1 for '-')

if (Character.isDigit(c))
ğŸ”¹ Agar character digit hai, toh number build karo (multi-digit support ke liye num = num * 10 + (c - '0'))

if (c == '+') / (c == '-')
ğŸ”¹ Previous number ko current sign ke saath result me add karo
ğŸ”¹ Naya sign set karo for next number
ğŸ”¹ num = 0 reset

if (c == '(')
ğŸ”¹ Current result and sign ko stack me push karo
ğŸ”¹ Parenthesis ke andar ek fresh evaluation start hoga

if (c == ')')
ğŸ”¹ Current result ke saath latest number add karo
ğŸ”¹ stack.pop() se sign lo, aur result * sign
ğŸ”¹ stack.pop() se outer result add karo

Final Step:
result += sign * num;
ğŸ”¹ Agar loop khatam ho gaya aur koi number bacha hai, use bhi result me add karo

Example Dry Run
Input: "1 + (2 - (3 + 4))"
Steps:

1 â†’ result = 1

+ (2 - (3 + 4))

inner (3 + 4) â†’ 7

2 - 7 = -5

1 + (-5) = -4
Final output = -4

Time & Space Complexity
Item	Complexity
Time	O(N)
Space	O(N)
Need more help or Java tricks?
https://www.linkedin.com/in/saurabh884095/