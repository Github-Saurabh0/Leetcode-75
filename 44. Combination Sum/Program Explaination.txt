✅ Leetcode 39: Combination Sum – Java (1ms, O(2ⁿ) Backtracking)

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] candidates, int target, int start, 
                           List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = start; i < candidates.length; i++) {
            if (candidates[i] > target) continue; // pruning
            current.add(candidates[i]);
            backtrack(candidates, target - candidates[i], i, current, result);
            current.remove(current.size() - 1); // backtrack
        }
    }
}


🧠 Explanation Line by Line:
List<List<Integer>> result = new ArrayList<>();
→ Final combinations store karne ke liye list.

backtrack(candidates, target, 0, new ArrayList<>(), result);
→ DFS start from index 0 and empty path.

if (target == 0)
→ Agar exact sum mil gaya, toh current list ko result me add karo.

for (int i = start; i < candidates.length; i++)
→ Start se loop kar rahe hain taaki duplicate combinations avoid ho.

if (candidates[i] > target) continue;
→ Agar current number target se bada hai, toh skip (pruning).

current.add(candidates[i]);
→ Number ko current list me add karo.

backtrack(candidates, target - candidates[i], i, current, result);
→ Same index se phir se try karo (unlimited use allowed).

current.remove(current.size() - 1);
→ Backtrack step (last added element hata do).

📌 Example:
Input:
candidates = [2,3,6,7], target = 7

Output:
[[2,2,3], [7]]

⏱️ Time & Space Complexity:
Time: O(2^target) worst-case (each number can be picked/unpicked)

Space: O(target) recursion depth (for current list)

For any help or collaboration:
🔗 https://www.linkedin.com/in/saurabh884095/