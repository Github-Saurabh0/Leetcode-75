âœ… Java Code (Clean, Fast, Accurate Parsing)

class Solution {
    public int minMaxDifference(int num) {
        String s = String.valueOf(num);

        // Maximize the number
        char targetMax = ' ';
        for (char c : s.toCharArray()) {
            if (c != '9') {
                targetMax = c;
                break;
            }
        }

        String maxNum = s;
        if (targetMax != ' ') {
            maxNum = s.replace(targetMax, '9');
        }

        // Minimize the number
        char targetMin = s.charAt(0);
        String minNum = s.replace(targetMin, '0');

        return Integer.parseInt(maxNum) - Integer.parseInt(minNum);
    }
}


ðŸ“˜ Explanation (Line-by-Line)

String s = String.valueOf(num);
ðŸ”¹ Input number ko string mein convert kiya for easy digit replacement.

Maximizing Step:

char targetMax = ' ';
ðŸ”¹ Pehla digit dhoondh rahe hain jo '9' nahi hai.

for (char c : s.toCharArray())
ðŸ”¹ Loop karke pehla non-9 digit dhoondha.

if (c != '9') â†’ targetMax = c;
ðŸ”¹ Is digit ko 9 se replace karenge to maximize number.

maxNum = s.replace(targetMax, '9');
ðŸ”¹ Sab targetMax digits ko '9' se replace kar diya.

Minimizing Step:

char targetMin = s.charAt(0);
ðŸ”¹ Minimize karne ke liye sabse pehla digit ko â€˜0â€™ se replace karenge.

minNum = s.replace(targetMin, '0');
ðŸ”¹ Sab us digit ko 0 se replace kar diya.

return Integer.parseInt(maxNum) - Integer.parseInt(minNum);
ðŸ”¹ Max - Min ka difference return kiya.

ðŸ§  Example

Input: num = 11891
Maximize â†’ Replace '1' with '9' â†’ 99899
Minimize â†’ Replace first '1' with '0' â†’ 00890 â†’ interpreted as 890

âœ… Output: 99899 - 890 = 99009

ðŸš€ Time and Space Complexity

Time: O(n) â†’ n = number of digits
Space: O(n) â†’ String operations

ðŸ”— If any need please ask me:
https://www.linkedin.com/in/saurabh884095/