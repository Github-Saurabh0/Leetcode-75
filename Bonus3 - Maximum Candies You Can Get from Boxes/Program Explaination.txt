‚úÖ Leetcode 1298: Maximum Candies You Can Get from Boxes (Java Solution ‚Äî O(n) Time)

üîß Optimal Java Code (BFS Approach):

import java.util.*;

public class Solution {
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int n = status.length;
        boolean[] seen = new boolean[n];
        boolean[] hasKey = new boolean[n];
        boolean[] canOpen = new boolean[n];

        Queue<Integer> queue = new LinkedList<>();
        for (int box : initialBoxes) {
            seen[box] = true;
            if (status[box] == 1) {
                queue.offer(box);
                canOpen[box] = true;
            }
        }

        int totalCandies = 0;
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            totalCandies += candies[curr];

            for (int k : keys[curr]) {
                if (!hasKey[k]) {
                    hasKey[k] = true;
                    if (seen[k] && !canOpen[k]) {
                        queue.offer(k);
                        canOpen[k] = true;
                    }
                }
            }

            for (int b : containedBoxes[curr]) {
                seen[b] = true;
                if (status[b] == 1 || hasKey[b]) {
                    if (!canOpen[b]) {
                        queue.offer(b);
                        canOpen[b] = true;
                    }
                }
            }
        }

        return totalCandies;
    }
}

üìù Explanation (Line-by-Line):

int n = status.length;
boolean[] seen = new boolean[n];
boolean[] hasKey = new boolean[n];
boolean[] canOpen = new boolean[n];
‚û°Ô∏è Track karne ke liye arrays banaye:
   - seen[]: boxes jo mil chuke hain
   - hasKey[]: keys jo humare paas hain
   - canOpen[]: boxes jo khul sakte hain

Queue<Integer> queue = new LinkedList<>();
‚û°Ô∏è BFS traversal ke liye queue banayi.

for (int box : initialBoxes) {
    seen[box] = true;
    if (status[box] == 1) {
        queue.offer(box);
        canOpen[box] = true;
    }
}
‚û°Ô∏è Jo initial boxes diye gaye hain, unko mark kiya aur agar open hain toh queue me daal diya.

int totalCandies = 0;
while (!queue.isEmpty()) {
    int curr = queue.poll();
    totalCandies += candies[curr];
‚û°Ô∏è Queue se box nikaal ke uske candies collect ki.

    for (int k : keys[curr]) {
        if (!hasKey[k]) {
            hasKey[k] = true;
            if (seen[k] && !canOpen[k]) {
                queue.offer(k);
                canOpen[k] = true;
            }
        }
    }
‚û°Ô∏è Box ke andar jo keys milti hain unse naye boxes unlock kiye jaate hain.

    for (int b : containedBoxes[curr]) {
        seen[b] = true;
        if (status[b] == 1 || hasKey[b]) {
            if (!canOpen[b]) {
                queue.offer(b);
                canOpen[b] = true;
            }
        }
    }
‚û°Ô∏è Jo naye boxes mile, unko bhi check kiya aur agar wo khul sakte hain toh queue me daala.

return totalCandies;
‚û°Ô∏è Final result me maximum candies return kiya.

üß† Time Complexity: O(n)
üß† Space Complexity: O(n)

üîó If any need please ask me: https://www.linkedin.com/in/saurabh884095/